<?= '<?' ?>

<?
/* @var $entity Entity */
$implements = ['CRUDListModel'];
$traits = [];
if($entity->multilingual){
	$implements[] = 'Multilingual'; 
	$traits[] = 'MultilingualTrait';	
}
if($entity->historical){
	$implements[] = 'Historical';
	$traits[] = 'HistoricalTrait';
}
if ($entity->optionModel) { 
	$implements[] = 'OptionsModel';
}
?>
namespace <?= $entity->getDbNamespace() ?>;

use Common\CRUDListModel;
<? 
if ($entity->historical){
?>use Common\Db\Historical;
use Common\Db\HistoricalTrait;
<? }  
if ($entity->multilingual){
?>use Common\Db\Multilingual;
use Common\Db\MultilingualTrait;
<? } 
if ($entity->optionModel){ ?>
use Common\Db\OptionsModel;
<? } ?>
use Common\Db\Select;
use Common\Db\Table;
use Zend\Db\Adapter\Adapter;
use Zend\Db\Sql\Expression;

class <?= $entity->getDbClass() ?> extends Table <?= !empty($implements) ? 'implements ' :''?><?= implode(', ', $implements)?> {
	<? if(!empty($traits)){ ?>

	use <?= implode(', ', $traits)?>;
<?} ?>
	
	protected $table = '<?= $entity->source ?>';

	public function __construct(Adapter $adapter) {
		$this->adapter = $adapter;
<? if($entity->multilingual && !empty($entity->langFields())){ 
?>		$this->langFields(['<?= implode("', '", $entity->langFields())?>']);<? 
}?>	}


	// CRUD list implementation
	/**
	 * @param array $filter
	 * @return Select
	 */
	public function getSelect($filter){
	
		$select = new Select(['<?= $entity->sourceAlias ?>' => '<?= $entity->source ?>']);		

		if(!empty($filter['query'])){
			$select->where->expression('concat(" ", LOWER(<?= $entity->sourceAlias ?>.<?= $entity->nameField ?>)) like ?', "% ".mb_strtolower($filter['query']."%"));
		}
			
		return $select;
	}
	
	public function getTotals($filter){
		
		$select = $this->getSelect($filter);
		$select->reset(Select::COLUMNS)
			->columns(['count' => new Expression('count(<?= $entity->sourceAlias ?>.id)')]);
		return $select->fetchRow();
		
	}
	
	public function getItems($filter, $p = 1, $ipp = 100){
		$select = $this->getSelect($filter);
		$select->limit($ipp)->offset(($p-1)*$ipp);
		$select->order('<?= $entity->sourceAlias ?>.id asc');
		$items = $select->fetchAll();
		foreach ($items as &$item){
			$this->buildItem($item);
		}
		return $items;
	}
		
	public function buildItem(&$item){
		return parent::buildItem($item);
	}

	public function insert($insert){
    	return parent::insert($insert);    	
    }	

	<? if ($entity->optionModel) { ?> 
	// Options Model implementation
	public function options() {
		return null;
	}

	public function option($key) {
		$item = $this->get($key);
		if($item != null ){
			return $item['<?= $entity->nameField ?>'];
		} else {
			null;
		}
	}
	<? } ?>

	<? if ($entity->historical) { ?>	
	// History Model implementation
	public function saveHistory(array $newValues = null, array $oldValues = null, $id = null) {	
		$historyWriter = $this->getHistoryWriter($newValues, $oldValues, $id);	
		// $historyWriter->setSkipDataFor(['']);							
		$historyWriter->writeAll();
	}
	
	public function readHistory($id) {
		$historyReader = $this->getHistoryReader($id);		
		return $historyReader->getRecordsByDate();
	}

	// Misc	
	public function getStat($id){
		$historyReader = $this->getHistoryReader($id);
		$stat = $historyReader->getStat();		
		return $stat;
	}
	<? } else { ?>// Misc
	public function getStat($id){
		$item = $this->get($id);
		return $stat;
	}	
	<? } ?>
	
}
